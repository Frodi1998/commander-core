import { ConfigureError } from "../errors";
import { ICommand, IContext, Context, THandlerCommand } from "../../types";

/**
 * @description –ö–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã
 * @class
 */
export class Command {
    /**
     * @type {RegExp | string} –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–∞–Ω–¥—ã
     */
    public pattern: RegExp | string;

    /**
     * @type {string} –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    public name?: string;

    /**
     * @type {string} –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    public description?: string;

    /**
     * @type {Array<string>}
     */
    public categories: string[];

    /**
     * @type {Record<string, unknown>} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    public params: Record<string, unknown>;

    /**
     * @type {Array<Command>} –º–∞—Å—Å–∏–≤ –ø–æ–¥–∫–æ–º–∞–Ω–¥
     */
    public commands: Command[];

    /**
     * @type {THandlerCommand} —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
     */
    handler: THandlerCommand;

    [key: string]: unknown;
    
    /**
     * –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã
     * @param {ICommand} data 
     * @example
     * 
     * new Command({
     *  pattern: /test/i,
     *  name: 'test',
     *  description: 'test command',
     *  categories: ['test'],
     *  
     *  params: {
     *      emoji: 'üìÑ'
     * },
     *  
     *  handler(context) {
     *      context.send('test');
     *  }
     * })
     */
    constructor(data: ICommand) {
        if(!data.pattern) {
			throw new ConfigureError('–ù–µ —É–∫–∞–∑–∞–Ω pattern –∫–æ–º–∞–Ω–¥—ã (—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)');
        }

        if(!(data.pattern instanceof RegExp)) {
			data.pattern = new RegExp(data.pattern);
		}

        if(!data.handler) {
			throw new ConfigureError('–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã');
		}

		if(typeof data.handler !== 'function') {
			throw new ConfigureError('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
        }

        const { 
            pattern, 
            name, 
            description,
            categories,
            params,  
            commands, 
            handler 
        } = data;
        
        this.pattern = pattern;
		this.name = name;
		this.description = description || '';
        this.categories = categories || [];
        this.params = params || {};
		this.commands = <Command[] | []>commands || [];
        this.handler = handler;
    }

    get [Symbol.toStringTag](): string {
		return 'Command';
	}

    /**
     * @description –ø–æ–∏—Å–∫ –ø–æ–¥–∫–æ–º–∞–Ω–¥
     * @param {Record<string, any>} context 
     * @returns {Command}
     */
    findSubCommand<c extends Context>(context: c & IContext): Command {
        let command: Command;

        for(const subCommand of this.commands) {            
            if ((<RegExp>subCommand.pattern).test(context.body[1])) {
                command = subCommand;
            }
        }

        if(!command) {
            return this;
        }

        context.body = context.body[1].match(command.pattern);

        if(command.commands.length) {
            command = (<Command>command).findSubCommand<c>(context);
        }      

        return command;
	}
}